import threading
import itertools

class PasswordGenerator:
    def _init_(self, possible_combination: int, combination_type: int, num_threads: int):
        self.possible_combination = possible_combination
        self.combination_type = combination_type
        self.special = '!"#$%&\'()*+,-./:;?@[]^_`{|}~'
        self.numeric = '0123456789'
        self.alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
        self.get_character = ""
        self.num_threads = num_threads

    def generate_get_character(self):
        if self.combination_type == 1:
            self.get_character = self.numeric
        elif self.combination_type == 2:
            self.get_character = self.alphabet
        elif self.combination_type == 3:
            self.get_character = self.special
        elif self.combination_type == 4:
            self.get_character = self.alphabet + self.numeric
        elif self.combination_type == 5:
            self.get_character = self.alphabet + self.special
        elif self.combination_type == 6:
            self.get_character = self.alphabet + self.numeric + self.special
        else:
            raise ValueError("Invalid combination_type")

    def generate_password(self, start: int, end: int, output: list):
        all_combinations = list(itertools.product(self.get_character, repeat=self.possible_combination))
        for combo in all_combinations[start:end]:
            output.append(''.join(combo))

    def generate_password_thread(self, thread_id: int, output: list, lock: threading.Lock):
        total = len(self.get_character) ** self.possible_combination
        start = thread_id * total // self.num_threads
        end = (thread_id + 1) * total // self.num_threads
        passwords = []
        self.generate_password(start, end, passwords)
        with lock:
            output.extend(passwords)

    def generate_passwords(self):
        self.generate_get_character()
        threads = []
        output = []
        lock = threading.Lock()

        for i in range(self.num_threads):
            thread = threading.Thread(target=self.generate_password_thread, args=(i, output, lock))
            threads.append(thread)
            thread.start()

        for thread in threads:
            thread.join()

        with open("password_list.txt", "w") as file:
            for password in output:
                file.write(password + "\n")
                print(f"Possible combination: {password}")


# ---- Main Execution ---- #
possible_combination = int(input("How many characters per password? (e.g., 3): "))
combination_type = int(input("Enter combination type (1-6):\n"
                             "1: Numeric\n"
                             "2: Alphabet\n"
                             "3: Special\n"
                             "4: Alphabet + Numeric\n"
                             "5: Alphabet + Special\n"
                             "6: Alphabet + Numeric + Special\nChoice: "))
num_threads = int(input("How many threads to use? "))

generator = PasswordGenerator(possible_combination, combination_type, num_threads)
generator.generate_passwords()
